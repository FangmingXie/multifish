includeConfig 'external-modules/spark/nextflow.config'

manifest {
  name = 'JaneliaSciComp/multifish'
  author = 'Janelia MultiFISH Team Project'
  homePage = 'https://github.com/JaneliaSciComp/multifish'
  description = 'Analysis pipeline for EASI-FISH (Expansion-Assisted Iterative Fluorescence In Situ Hybridization)'
  mainScript = 'main.nf'
  nextflowVersion = '>=23.04.1'
  version = '1.1.0'
}

params {
    lsf_opts = ''
    runtime_opts = ''
    singularity_cache_dir = getEnvValue("HOME", "/tmp") + "/.singularity_cache"
    singularity_user = getEnvValue("USER", null)
    user_id = getUID()

    data_dir = ''
    output_dir = ''
    publish_dir = ''
    shared_work_dir = ''

    // default parameter for all acquisitions that must be processed
    // should only be used when all steps must be performed for all acquisions
    acq_names = ''
    ref_acq = '' // data from specified acquisiotn will be used as reference for registration and/or segmentation

    dapi_channel = 'c2' // DAPI channel used to drive both the segmentation and the registration
    bleed_channel = 'c3'

    dask_work_dir = "${PWD}/work/dask"
    dask_config_path = ''

    distributed_cellpose = true
    // when using docker this could be set to '-p 8787:8787'
    dask_status_port_binding = ''

    use_cellpose = false
    cellpose_process_blocksize = '128,128,128'
    cellpose_model = 'cyto'
    cellpose_min_size = 10
    cellpose_diameter = 30
    cellpose_cellprob_threshold = 1.0
    cellpose_iou_depth = 1
    cellpose_iou_threshold = 0.05

    cellpose_models_dir = './work/cellpose-models'
    cellpose_work_dir = ''
    cellpose_dask_workers = 2
    cellpose_required_workers = 1
    cellpose_driver_cpus = 2
    cellpose_driver_mem_gb = 12
    cellpose_worker_cpus = 2
    cellpose_worker_memgb = 10

    bigstream_global_use_existing_affine_if_found = true
    bigstream_global_ransac_spot_detection_method = ''
    bigstream_global_ransac_fix_spot_winsorize_limits = '0.02,0.02'
    bigstream_global_ransac_mov_spot_winsorize_limits = '0.02,0.02'
    bigstream_global_shrink_factors = '2'
    bigstream_global_ransac_num_sigma_max = 7
    bigstream_global_ransac_cc_radius = 12
    bigstream_global_ransac_nspots = 2000
    bigstream_global_ransac_diagonal_constraint = 0.75
    bigstream_global_ransac_match_threshold = 0.6
    bigstream_global_ransac_align_threshold = 2.0
    bigstream_global_ransac_fix_spot_detection_threshold = 0.01
    bigstream_global_ransac_fix_spot_detection_threshold_rel = 0.05
    bigstream_global_ransac_mov_spot_detection_threshold = 0.01
    bigstream_global_ransac_mov_spot_detection_threshold_rel = 0.05
    bigstream_global_ransac_blob_sizes = '6,20'
    bigstream_global_ransac_fix_spots_count_threshold = 100
    bigstream_global_ransac_mov_spots_count_threshold = 100
    bigstream_global_ransac_point_matches_threshold = 50
    bigstream_global_smooth_sigmas = 2.5
    bigstream_global_learning_rate = 0.25
    bigstream_global_metric = ''
    bigstream_global_optimizer = ''
    bigstream_global_sampling = ''
    bigstream_global_interpolator = ''
    bigstream_global_sampling_percentage = ''
    bigstream_global_alignment_spacing = ''
    bigstream_global_iterations = 100

    bigstream_dask_work_dir = './work/bigstream_dask'
    bigstream_dask_config = './configs/bigstream_dask_config.yml'

    bigstream_local_blocksize = '256,256,256'
    bigstream_local_overlap_factor = 0.25
    bigstream_local_transform_blocksize = '256,256,256'
    bigstream_local_ransac_spot_detection_method = ''
    bigstream_local_ransac_fix_spot_winsorize_limits = '0.02,0.02'
    bigstream_local_ransac_mov_spot_winsorize_limits = '0.02,0.02'
    bigstream_local_shrink_factors = '2'
    bigstream_local_ransac_num_sigma_max = 7
    bigstream_local_ransac_cc_radius = 12
    bigstream_local_ransac_nspots = 2000
    bigstream_local_ransac_diagonal_constraint = 0.75
    bigstream_local_ransac_match_threshold = 0.6
    bigstream_local_ransac_align_threshold = 2.0
    bigstream_local_ransac_fix_spot_detection_threshold = 0.01
    bigstream_local_ransac_fix_spot_detection_threshold_rel = 0.02
    bigstream_local_ransac_mov_spot_detection_threshold = 0.01
    bigstream_local_ransac_mov_spot_detection_threshold_rel = 0.02
    bigstream_local_ransac_blob_sizes = '6,20'
    bigstream_local_ransac_fix_spots_count_threshold = 100
    bigstream_local_ransac_mov_spots_count_threshold = 100
    bigstream_local_ransac_point_matches_threshold = 50
    bigstream_local_control_point_spacing = 50
    bigstream_local_control_point_levels = '1'
    bigstream_local_smooth_sigmas = 0.25
    bigstream_local_learning_rate = 0.25
    bigstream_local_metric = ''
    bigstream_local_optimizer = ''
    bigstream_local_sampling = ''
    bigstream_local_interpolator = ''
    bigstream_local_sampling_percentage = ''
    bigstream_local_alignment_spacing = ''
    bigstream_local_iterations = 5

    bigstream_inv_iterations = 5
    bigstream_inv_order = 2
    bigstream_inv_sqrt_iterations = 5

    bigstream_local_max_tasks = 0
}

process {
    beforeScript = 'export PROCESS_DIR=`pwd`' 

    withLabel: small {
        cpus = 1
        memory = 1.GB
    }

    withName:".*:CELLPOSE_SEGMENTATION:.*" {
        ext.container = 'ghcr.io/janeliascicomp/cellpose:2.2.3-dask2023.10.1-py11'
        containerOptions = params.runtime_opts
    }

    withName:".*:CELLPOSE_SEGMENTATION:.*:DASK_STARTMANAGER" {
        containerOptions = "${params.dask_status_port_binding}"
    }

    withName:CELLPOSE {
        ext {
            args = [
                "--output-blocksize 0,0,0",
                "--process-blocksize ${params.cellpose_process_blocksize}",
                "--model ${params.cellpose_model}",
                "--min_size ${params.cellpose_min_size}",
                "--diam_mean ${params.cellpose_diameter}",
                "--cellprob_threshold ${params.cellpose_cellprob_threshold}",
                "--iou-threshold ${params.cellpose_iou_threshold}",
                "--iou-depth ${params.cellpose_iou_depth}",
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_.*:.*" {
        ext.container = 'janeliascicomp/bigstream:1.2.9-dask2023.10.1-py11'
        containerOptions = "${params.runtime_opts}"

        pod = [
            [hostPath: '/nrs/scicompsoft/goinac/multifish', mountPath: '/nrs/scicompsoft/goinac/multifish'],
            [hostPath: '/nrs/liu', mountPath: '/nrs/liu']
        ]
    }

    withName:".*:BIGSTREAM_.*:DASK_STARTMANAGER" {
        containerOptions = "${params.runtime_opts} ${params.dask_status_port_binding}"
    }

    withName:".*:BIGSTREAM_GLOBALALIGN" {
        ext {
            args = [
                bool_arg('--use-existing-global-transform', params.bigstream_global_use_existing_affine_if_found),
                optional_arg_value('--global-ransac-spot-detection-method', params.bigstream_global_ransac_spot_detection_method),
                optional_arg_value('--global-ransac-fix-spot-winsorize-limits', params.bigstream_global_ransac_fix_spot_winsorize_limits),
                optional_arg_value('--global-ransac-mov-spot-winsorize-limits', params.bigstream_global_ransac_mov_spot_winsorize_limits),
                optional_arg_value('--global-shrink-factors', params.bigstream_global_shrink_factors),
                optional_arg_value('--global-ransac-num-sigma-max', params.bigstream_global_ransac_num_sigma_max),
                optional_arg_value('--global-ransac-cc-radius', params.bigstream_global_ransac_cc_radius),
                optional_arg_value('--global-ransac-nspots', params.bigstream_global_ransac_nspots),
                optional_arg_value('--global-ransac-diagonal-constraint', params.bigstream_global_ransac_diagonal_constraint),
                optional_arg_value('--global-ransac-match-threshold', params.bigstream_global_ransac_match_threshold),
                optional_arg_value('--global-ransac-align-threshold', params.bigstream_global_ransac_align_threshold),
                optional_arg_value('--global-ransac-fix-spot-detection-threshold', params.bigstream_global_ransac_fix_spot_detection_threshold),
                optional_arg_value('--global-ransac-fix-spot-detection-threshold-rel', params.bigstream_global_ransac_fix_spot_detection_threshold_rel),
                optional_arg_value('--global-ransac-mov-spot-detection-threshold', params.bigstream_global_ransac_mov_spot_detection_threshold),
                optional_arg_value('--global-ransac-mov-spot-detection-threshold-rel', params.bigstream_global_ransac_mov_spot_detection_threshold_rel),
                optional_arg_value('--global-ransac-blob-sizes', params.bigstream_global_ransac_blob_sizes),
                optional_arg_value('--global-ransac-fix-spots-count-threshold', params.bigstream_global_ransac_fix_spots_count_threshold),
                optional_arg_value('--global-ransac-mov-spots-count-threshold', params.bigstream_global_ransac_mov_spots_count_threshold),
                optional_arg_value('--global-ransac-point-matches-threshold', params.bigstream_global_ransac_point_matches_threshold),
                optional_arg_value('--global-smooth-sigmas', params.bigstream_global_smooth_sigmas),
                optional_arg_value('--global-learning-rate', params.bigstream_global_learning_rate),
                optional_arg_value('--global-metric', params.bigstream_global_metric),
                optional_arg_value('--global-optimizer', params.bigstream_global_optimizer),
                optional_arg_value('--global-sampling', params.bigstream_global_sampling),
                optional_arg_value('--global-interpolator', params.bigstream_global_interpolator),
                optional_arg_value('--global-sampling-percentage', params.bigstream_global_sampling_percentage),
                optional_arg_value('--global-alignment-spacing', params.bigstream_global_alignment_spacing),
                arg_value('--global-iterations', params.bigstream_global_iterations)
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_LOCALALIGN" {
        ext {
            args = [
                optional_arg_value('--output-blocksize', params.bigstream_local_blocksize),
                optional_arg_value('--blocks-overlap-factor', params.bigstream_local_overlap_factor),
                optional_arg_value('--local-transform-blocksize', params.bigstream_local_transform_blocksize),
                optional_arg_value('--local-ransac-spot-detection-method', params.bigstream_local_ransac_spot_detection_method),
                optional_arg_value('--local-ransac-fix-spot-winsorize-limits', params.bigstream_local_ransac_fix_spot_winsorize_limits),
                optional_arg_value('--local-ransac-mov-spot-winsorize-limits', params.bigstream_local_ransac_mov_spot_winsorize_limits),

                optional_arg_value('--local-shrink-factors', params.bigstream_local_shrink_factors),
                optional_arg_value('--local-ransac-num-sigma-max', params.bigstream_local_ransac_num_sigma_max),
                optional_arg_value('--local-ransac-cc-radius', params.bigstream_local_ransac_cc_radius),
                optional_arg_value('--local-ransac-nspots', params.bigstream_local_ransac_nspots),
                optional_arg_value('--local-ransac-diagonal-constraint', params.bigstream_local_ransac_diagonal_constraint),
                optional_arg_value('--local-ransac-match-threshold', params.bigstream_local_ransac_match_threshold),
                optional_arg_value('--local-ransac-align-threshold', params.bigstream_local_ransac_align_threshold),
                optional_arg_value('--local-ransac-fix-spot-detection-threshold', params.bigstream_local_ransac_fix_spot_detection_threshold),
                optional_arg_value('--local-ransac-fix-spot-detection-threshold-rel', params.bigstream_local_ransac_fix_spot_detection_threshold_rel),
                optional_arg_value('--local-ransac-mov-spot-detection-threshold', params.bigstream_local_ransac_mov_spot_detection_threshold),
                optional_arg_value('--local-ransac-mov-spot-detection-threshold-rel', params.bigstream_local_ransac_mov_spot_detection_threshold_rel),
                optional_arg_value('--local-ransac-blob-sizes', params.bigstream_local_ransac_blob_sizes),
                optional_arg_value('--local-ransac-fix-spots-count-threshold', params.bigstream_local_ransac_fix_spots_count_threshold),
                optional_arg_value('--local-ransac-mov-spots-count-threshold', params.bigstream_local_ransac_mov_spots_count_threshold),
                optional_arg_value('--local-ransac-point-matches-threshold', params.bigstream_local_ransac_point_matches_threshold),
                optional_arg_value('--local-control-point-spacing', params.bigstream_local_control_point_spacing),
                optional_arg_value('--local-control-point-levels', params.bigstream_local_control_point_levels),
                optional_arg_value('--local-smooth-sigmas', params.bigstream_local_smooth_sigmas),
                optional_arg_value('--local-learning-rate', params.bigstream_local_learning_rate),
                optional_arg_value('--local-metric', params.bigstream_local_metric),
                optional_arg_value('--local-optimizer', params.bigstream_local_optimizer),
                optional_arg_value('--local-sampling', params.bigstream_local_sampling),
                optional_arg_value('--local-interpolator', params.bigstream_local_interpolator),
                optional_arg_value('--local-sampling-percentage', params.bigstream_local_sampling_percentage),
                optional_arg_value('--local-alignment-spacing', params.bigstream_local_alignment_spacing),
                arg_value('--local-iterations', params.bigstream_local_iterations),
                optional_arg_value('--inv-iterations', params.bigstream_inv_iterations),
                optional_arg_value('--inv-order', params.bigstream_inv_order),
                optional_arg_value('--inv-sqrt-iterations', params.bigstream_inv_sqrt_iterations),
                optional_arg_value('--cluster-max-tasks', params.bigstream_local_max_tasks),
            ].join(' ')
        }
    }

}

profiles {

    standard {
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
    }

    localsingularity {
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
        process {
            withLabel: withGPU {
                containerOptions = "--nv ${params.runtime_opts}"
            }
        }
    }
    
    localdocker {
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

    lsf {
        process {
            executor = 'lsf'
            clusterOptions = params.lsf_opts

            withLabel: withGPU {
                queue = 'gpu_rtx'
                clusterOptions = '-gpu "num=1" ' + params.lsf_opts
                containerOptions = "--nv ${params.runtime_opts}"
            }

            withLabel: withAVX2 {
                clusterOptions = '-R"select[avx2]" ' + params.lsf_opts
            }

            withLabel: preferLocal {
                executor = 'local'
            }
        }
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
    }

    kubernetes {
        process {
            executor = 'k8s'
        }

        k8s {
            autoMountHostPaths = true
            computeResourceType = 'Job'
            httpConnectTimeout = '600s'
            httpReadTimeout = '600s'
            context = 'nfcontext'
            namespace = 'default'
            runAsUser = params.user_id
        }
    }

    tower {
        process {
            withLabel: withGPU {
                containerOptions = params.runtime_opts
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
        params.singularity_user = "ec2_user"
    }

    tower_gpu {
        process {
            withLabel: withGPU {
                accelerator = 1
                containerOptions = "--runtime nvidia ${params.runtime_opts}"
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

    awsbatch {
        aws {
            region = 'us-east-1'

            client {
                maxConnections = 20
                connectionTimeout = 10000
            }

            batch {
                cliPath = '/home/ec2-user/miniconda/bin/aws'
                maxTransferAttempts = 10
                volumes = [ '/tmp', '/s3-multifish', '/efs-multifish' ]
                jobRole = 'easi-multifish-dev-ECSTaskRole'
            }
        }

        process {
            executor = 'awsbatch'
            queue = 'easi-multifish-dev-multifish-cpu-job-queue'

            withLabel: small {
                queue = 'easi-multifish-dev-multifish-small-cpu-job-queue'
            }

            withLabel: withGPU {
                accelerator = 1
                queue = 'easi-multifish-dev-multifish-gpu-job-queue'
                containerOptions = "--runtime nvidia ${params.runtime_opts}"
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

}

singularity {
    autoMounts = true
    cacheDir = "${params.singularity_cache_dir}"
    runOptions = "-e --env PROCESS_DIR=\$PROCESS_DIR --env USER=${params.singularity_user} ${params.runtime_opts}"
}

apptainer {
    autoMounts = true
    cacheDir = "${params.singularity_cache_dir}"
    runOptions = "-e --env PROCESS_DIR=\$PROCESS_DIR --env USER=${params.singularity_user} ${params.runtime_opts}"
}

// Borrowed from nf-virontus/nextflow.config
// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
  envMap = new HashMap(System.getenv())
  if (envMap.containsKey(envKey)) {
    envMap[envKey]
  } else {
    defaultValue
  }
}

def getUID() {
    def p = Runtime.getRuntime().exec('id -u')
    try (InputStreamReader pout = new InputStreamReader(p.inputStream)) {
        pout.readLine() as Integer
    }
}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}

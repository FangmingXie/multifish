includeConfig 'external-modules/spark/nextflow.config'

manifest {
  name = 'JaneliaSciComp/multifish'
  author = 'Janelia MultiFISH Team Project'
  homePage = 'https://github.com/JaneliaSciComp/multifish'
  description = 'Analysis pipeline for EASI-FISH (Expansion-Assisted Iterative Fluorescence In Situ Hybridization)'
  mainScript = 'main.nf'
  nextflowVersion = '>=23.04.1'
  version = '1.1.0'
}

params {
    lsf_opts = ''
    runtime_opts = ''
    singularity_cache_dir = getEnvValue("HOME", "/tmp") + "/.singularity_cache"
    singularity_user = getEnvValue("USER", null)
    dask_work_dir = "${PWD}/work/dask"
    dask_config_path = ''

    distributed_cellpose = true
    // when using docker this could be set to '-p 8787:8787'
    cellpose_dask_status_port_binding = ''

    cellpose_model = 'cyto'
    cellpose_diameter = 8

    cellpose_dask_workers = 2
    cellpose_required_workers = 1
    cellpose_driver_cpus = 2
    cellpose_driver_mem_gb = 12
    cellpose_worker_cpus = 2
    cellpose_worker_memgb = 10

}

process {
    beforeScript = 'export PROCESS_DIR=`pwd`' 

    withLabel: small {
        cpus = 1
        memory = 1.GB
    }

    withName:".*:CELLPOSE_SEGMENTATION:.*" {
        ext.container = 'quay.io/bioimagetools/cellpose:2.2.3-dask2023.10.1-py11'
        containerOptions = params.runtime_opts
    }

    withName:".*:CELLPOSE_SEGMENTATION:.*:DASK_STARTMANAGER" {
        containerOptions = "${params.cellpose_dask_status_port_binding}"
    }

    withName:CELLPOSE {
        ext {
            args = [
                "--model ${params.cellpose_model}",
                "--diam_mean ${params.cellpose_diameter}",
            ].join(' ')
        }
    }

}

profiles {

    standard {
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
    }

    localsingularity {
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
        process {
            withLabel: withGPU {
                containerOptions = "--nv ${params.runtime_opts}"
            }
        }
    }
    
    localdocker {
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

    lsf {
        process {
            executor = 'lsf'
            clusterOptions = params.lsf_opts

            withLabel: withGPU {
                queue = 'gpu_rtx'
                clusterOptions = '-gpu "num=1" ' + params.lsf_opts
                containerOptions = "--nv ${params.runtime_opts}"
            }

            withLabel: withAVX2 {
                clusterOptions = '-R"select[avx2]" ' + params.lsf_opts
            }

            withLabel: preferLocal {
                executor = 'local'
            }
        }
        docker.enabled = false
        singularity.enabled = true
        apptainer.enabled = false
    }

    tower {
        process {
            withLabel: withGPU {
                containerOptions = params.runtime_opts
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
        params.singularity_user = "ec2_user"
    }

    tower_gpu {
        process {
            withLabel: withGPU {
                accelerator = 1
                containerOptions = "--runtime nvidia ${params.runtime_opts}"
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

    awsbatch {
        aws {
            region = 'us-east-1'

            client {
                maxConnections = 20
                connectionTimeout = 10000
            }

            batch {
                cliPath = '/home/ec2-user/miniconda/bin/aws'
                maxTransferAttempts = 10
                volumes = [ '/tmp', '/s3-multifish', '/efs-multifish' ]
                jobRole = 'easi-multifish-dev-ECSTaskRole'
            }
        }

        process {
            executor = 'awsbatch'
            queue = 'easi-multifish-dev-multifish-cpu-job-queue'

            withLabel: small {
                queue = 'easi-multifish-dev-multifish-small-cpu-job-queue'
            }

            withLabel: withGPU {
                accelerator = 1
                queue = 'easi-multifish-dev-multifish-gpu-job-queue'
                containerOptions = "--runtime nvidia ${params.runtime_opts}"
            }
        }
        docker.enabled = true
        singularity.enabled = false
        apptainer.enabled = false
    }

}

singularity {
    autoMounts = true
    cacheDir = "${params.singularity_cache_dir}"
    runOptions = "-e --env PROCESS_DIR=\$PROCESS_DIR --env USER=${params.singularity_user} ${params.runtime_opts}"
}

apptainer {
    autoMounts = true
    cacheDir = "${params.singularity_cache_dir}"
    runOptions = "-e --env PROCESS_DIR=\$PROCESS_DIR --env USER=${params.singularity_user} ${params.runtime_opts}"
}

// Borrowed from nf-virontus/nextflow.config
// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
  envMap = new HashMap(System.getenv())
  if (envMap.containsKey(envKey)) {
    envMap[envKey]
  } else {
    defaultValue
  }
}

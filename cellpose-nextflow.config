params {
    runtime_opts = ''
    dask_scheduler_port_binding = ''

    cellpose = {
        process_blocksize = '128,128,128'
        model = 'cyto'
        min_size = 10
        diameter = 30
        cellprob_threshold = 1.0
        iou_depth = 1
        iou_threshold = 0.05

        models_dir = './work/cellpose-models'

        distributed = true
        dask_work_dir = './work/cellpose_dask'
        dask_config = './configs/dask_config.yml'

        work_dir = ''
        dask_workers = 2
        required_workers = 1
        driver_cpus = 2
        driver_mem_gb = 12
        worker_cpus = 2
        worker_memgb = 10

        max_tasks = 0
    }

}

process {

    withName:".*:CELLPOSE_SEGMENTATION:.*" {
        ext.container = 'ghcr.io/janeliascicomp/cellpose:2.2.3-dask2023.10.1-py11'
        containerOptions = params.runtime_opts
    }

    withName:".*:CELLPOSE_SEGMENTATION:.*:DASK_STARTMANAGER" {
        containerOptions = "${params.dask_scheduler_port_binding}"
    }

    withName:CELLPOSE {
        ext {
            args = [
                "--output-blocksize 0,0,0",
                "--process-blocksize ${params.cellpose.process_blocksize}",
                "--model ${params.cellpose.model}",
                "--min_size ${params.cellpose.min_size}",
                "--diam_mean ${params.cellpose.diameter}",
                "--cellprob_threshold ${params.cellpose.cellprob_threshold}",
                "--iou-threshold ${params.cellpose.iou_threshold}",
                "--iou-depth ${params.cellpose.iou_depth}",
            ].join(' ')
        }
    }

}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}

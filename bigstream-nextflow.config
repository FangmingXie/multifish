params {
    runtime_opts = ''
    dask_scheduler_port_binding = ''

    bigstream = {
        fix_name = ''
        fix_mask = ''
        fix_mask_subpath = ''
        global_fix = ''
        global_fix_subpath = ''
        global_fix_spacing = ''
        global_fix_mask = fix_mask
        global_fix_mask_subpath = fix_mask_subpath

        local_fix = ''
        local_fix_subpath = ''
        local_fix_spacing = ''
        local_fix_mask = fix_mask
        local_fix_mask_subpath = fix_mask_subpath

        mov_name = ''
        mov_mask = ''
        mov_mask_subpath = ''
        global_mov = ''
        global_mov_subpath = ''
        global_mov_spacing = ''
        global_mov_mask = mov_mask
        global_mask_subpath = mov_mask_subpath

        local_mov = ''
        local_mov_subpath = ''
        local_mov_spacing = ''
        local_mov_mask = mov_mask
        local_mask_subpath = mov_mask_subpath

        bigstream_config = './configs/bigstream_config.yml'

        global_use_existing_affine_if_found = true
        global_output_dir = ''
        global_transform_name = 'aff'
        global_align_name = 'aff'

        local_output_dir = ''
        local_align_name = 'deform'
        local_transform_name = ''
        local_transform_subpath = ''
        local_invtransform_name = ''
        local_inv_transform_subpath = ''

        with_dask = true
        dask_work_dir = 'work/dask'
        dask_config = 'configs/dask_config.yml'

        global_align_cpus = 1
        global_align_mem_gb = global_align_cpus*15
        local_align_cpus = 1
        local_align_mem_gb = local_align_cpus*15

        local_align_workers = 1
        local_align_min_workers = 1
        local_align_worker_cpus = 1
        local_align_worker_mem_gb = local_align_worker_cpus*15

        additional_deformed_subpaths = ''
        additional_deformed_paths = ''

        local_blocksize = '256,256,256'
        local_overlap_factor = 0.25

        inv_iterations = 5
        inv_order = 2
        inv_sqrt_iterations = 5

        dask_cluster_max_tasks = 0
    }


}

process {

    withName:".*:BIGSTREAM_.*" {
        ext.container = 'janeliascicomp/bigstream:1.3.0-dask2024.4.1-py11'
        containerOptions = "${params.runtime_opts}"
    }

    withName:"(.*:)?BIGSTREAM_.*:DASK_STARTMANAGER" {
        containerOptions = "${params.runtime_opts} ${params.dask_scheduler_port_binding}"
    }

    withName:".*:BIGSTREAM_GLOBALALIGN" {
        ext {
            args = [
                bool_arg('--global-use-existing-transform', params.bigstream.global_use_existing_affine_if_found),
                optional_arg_value('--global-fix-spacing', params.bigstream.global_fix_spacing),
                optional_arg_value('--global-mov-spacing', params.bigstream.global_mov_spacing),
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_LOCALALIGN" {
        ext {
            args = [
                // voxel spacing in case this is not present in the volume metadata
                optional_arg_value('--local-fix-spacing', params.bigstream.local_fix_spacing),
                optional_arg_value('--local-mov-spacing', params.bigstream.local_mov_spacing),

                optional_arg_value('--local-processing-size', params.bigstream.local_blocksize),
                optional_arg_value('--local-processing-overlap-factor', params.bigstream.local_overlap_factor),

                // parameters for generating the inverse transform
                optional_arg_value('--inv-iterations', params.bigstream.inv_iterations),
                optional_arg_value('--inv-order', params.bigstream.inv_order),
                optional_arg_value('--inv-sqrt-iterations', params.bigstream.inv_sqrt_iterations),

                optional_arg_value('--cluster-max-tasks', params.bigstream.dask_cluster_max_tasks),
            ].join(' ')
        }
    }

}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}
